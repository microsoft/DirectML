name: $(Date:yyMMdd-HHmm)$(Rev:.r).$(SourceBranchName)

pr: 
  branches:
    include: 
    - master
  paths:
    include: 
    - DxDispatch

trigger: none

parameters:
- name: publishNuget
  displayName: Publish Internal NuGet
  type: boolean
  default: false

stages:
- stage: buildStage
  displayName: Build
  jobs:
  # -----------------------------
  # WINDOWS BUILD
  # -----------------------------
  - job: build_windows
    displayName: Build Windows
    strategy:
      matrix:
        win_x64_release:
          configurePreset: win-x64
          buildPreset: win-x64-release
        win_x86_release:
          configurePreset: win-x86
          buildPreset: win-x86-release
        win_arm64_release:
          configurePreset: win-arm64
          buildPreset: win-arm64-release
    pool:
      vmImage: windows-2022
    steps:
    - task: PowerShell@2
      name: findCMake
      displayName: Find CMake
      inputs:
        targetType: inline
        script: |
          curl.exe -L -o vswhere.exe https://github.com/microsoft/vswhere/releases/download/3.0.3/vswhere.exe

          # Find VS 2022
          $VsPath = .\vswhere.exe -version '[17.0,18.0)' -property installationPath
          if (!$VsPath)
          {
              throw "Did not find VS 2022 installation."
          }

          # Find cmake.exe within VS 2022 installation.
          $CMakePath = Join-Path $VsPath 'Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe'
          $CPackPath = Join-Path $VsPath 'Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cpack.exe'
          if (!(Test-Path $CMakePath))
          {
              throw "Did not find cmake.exe in VS installation."
          }

          Write-Host "CMake found at '$CMakePath'"
          Write-Host "##vso[task.setVariable variable=cmakePath;isOutput=true]$CMakePath"
          Write-Host "##vso[task.setVariable variable=cpackPath;isOutput=true]$CPackPath"
          
    - powershell: |
        & '$(findCmake.cmakePath)' --preset $(configurePreset)
      displayName: Configure
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - powershell: |
        & '$(findCmake.cmakePath)' --build --preset $(buildPreset) --target install
      displayName: Build
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - task: NuGetToolInstaller@1

    - task: NuGetAuthenticate@0
      displayName: NuGet Authenticate

    - powershell: |
        & '$(findCmake.cpackPath)' -G NuGet -C RelWithDebInfo
      displayName: Package
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)

    - powershell: |
        copy "$(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/*.nupkg" $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/install/bin
      displayName: Configure
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - task: PublishBuildArtifacts@1
      displayName: Publish
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/install/bin
        ArtifactName: $(buildPreset)

    - ${{if parameters.publishNuget}}:
      - powershell: |
          $packagePath = (ls "$(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/*.nupkg").fullname
          nuget push $packagePath -Source https://pkgs.dev.azure.com/microsoft/WindowsAI/_packaging/WindowsAI/nuget/v3/index.json -ApiKey VSTS -SkipDuplicate
        displayName: NuGet Push

  # -----------------------------
  # LINUX BUILD
  # -----------------------------
  - job: build_linux
    displayName: Build Linux
    strategy:
      matrix:
        ubuntu_release:
          imageName: ubuntu-20.04
          configurePreset: linux-x64
          buildPreset: linux-x64-release
    pool:
      vmImage: $(imageName)
    steps:
    - script: |
        sudo apt install ninja-build
      displayName: Install Ninja

    - script: |
        export CC=/usr/bin/clang
        export CXX=/usr/bin/clang++
        cmake --preset $(configurePreset)
      displayName: Configure
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - script: |
        cmake --build --preset $(buildPreset) --target install
      displayName: Build
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - task: NuGetToolInstaller@1

    - task: NuGetAuthenticate@0
      displayName: NuGet Authenticate

    - script: |
        cpack -G NuGet -C RelWithDebInfo
      displayName: Package
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)

    - script: |
        cp $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/*.nupkg $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/install/bin
      displayName: Copy Package
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/install/bin
        ArtifactName: $(imageName)-release

    - ${{if parameters.publishNuget}}:
      - script: |
          dotnet nuget push $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/*.nupkg --source https://pkgs.dev.azure.com/microsoft/WindowsAI/_packaging/WindowsAI/nuget/v3/index.json --api-key VSTS --skip-duplicate
        displayName: NuGet Push