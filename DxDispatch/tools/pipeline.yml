name: $(Date:yyMMdd-HHmm)$(Rev:.r).$(SourceBranchName)

pr: 
  branches:
    include: 
    - master
  paths:
    include: 
    - DxDispatch

trigger: none

stages:
- stage: buildStage
  displayName: Build
  jobs:
  # -----------------------------
  # WINDOWS BUILD
  # -----------------------------
  - job: build_windows
    displayName: Build Windows
    strategy:
      matrix:
        win_x64_release:
          configurePreset: win-x64
          buildPreset: win-x64-release
        win_x86_release:
          configurePreset: win-x86
          buildPreset: win-x86-release
        win_arm64_release:
          configurePreset: win-arm64
          buildPreset: win-arm64-release
    pool: DirectML_BuildPool
    steps:
    - task: NuGetToolInstaller@1

    - task: PowerShell@2
      name: findCMake
      displayName: Find CMake
      inputs:
        targetType: inline
        script: |
          curl.exe -L -o vswhere.exe https://github.com/microsoft/vswhere/releases/download/3.0.3/vswhere.exe

          # Find VS 2022
          $VsPath = .\vswhere.exe -version '[17.0,18.0)' -property installationPath
          if (!$VsPath)
          {
              throw "Did not find VS 2022 installation."
          }

          # Find cmake.exe within VS 2022 installation.
          $CMakePath = Join-Path $VsPath 'Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe'
          $CPackPath = Join-Path $VsPath 'Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cpack.exe'
          if (!(Test-Path $CMakePath))
          {
              throw "Did not find cmake.exe in VS installation."
          }

          Write-Host "CMake found at '$CMakePath'"
          Write-Host "##vso[task.setVariable variable=cmakePath;isOutput=true]$CMakePath"
          Write-Host "##vso[task.setVariable variable=cpackPath;isOutput=true]$CPackPath"
          
    - powershell: |
        & '$(findCmake.cmakePath)' --preset $(configurePreset)
      displayName: Configure
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - powershell: |
        & '$(findCmake.cmakePath)' --build --preset $(buildPreset) --target install
      displayName: Build
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - script: |
        & '$(findCmake.cpackPath)' -G NuGet
      displayName: Package
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)

    - script: |
        cp -r $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/*.nupkg $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/install/bin/
      displayName: Copy Package

    - task: PublishBuildArtifacts@1
      displayName: Publish
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/install/bin
        ArtifactName: $(buildPreset)

  # -----------------------------
  # LINUX BUILD
  # -----------------------------
  - job: build_linux
    displayName: Build Linux
    strategy:
      matrix:
        ubuntu_release:
          imageName: ubuntu-20.04
          configurePreset: linux-x64
          buildPreset: linux-x64-release
    pool:
      vmImage: $(imageName)
    steps:
    - task: NuGetToolInstaller@1

    - script: |
        sudo apt install ninja-build
      displayName: Install Ninja

    - script: |
        export CC=/usr/bin/clang
        export CXX=/usr/bin/clang++
        cmake --preset $(configurePreset)
      displayName: Configure
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - script: |
        cmake --build --preset $(buildPreset) --target install
      displayName: Build
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch

    - script: |
        cpack -G NuGet
      displayName: Package
      workingDirectory: $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)

    - script: |
        cp -r $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/*.nupkg $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/install/bin/
      displayName: Copy Package

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)/DxDispatch/build/$(configurePreset)/install/bin
        ArtifactName: $(imageName)-release